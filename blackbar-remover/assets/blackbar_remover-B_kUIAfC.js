let i;const o=typeof TextDecoder<"u"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};typeof TextDecoder<"u"&&o.decode();let s=null;function a(){return(s===null||s.byteLength===0)&&(s=new Uint8Array(i.memory.buffer)),s}function y(e,n){return e=e>>>0,o.decode(a().subarray(e,e+n))}let c=0;function l(e,n){const t=n(e.length*1,1)>>>0;return a().set(e,t/1),c=e.length,t}function w(e){const n=i.__wbindgen_export_0.get(e);return i.__externref_table_dealloc(e),n}function g(e,n){return e=e>>>0,a().subarray(e/1,e/1+n)}function p(e){const n=l(e,i.__wbindgen_malloc),t=c,r=i.remove_black_bar(n,t);if(r[3])throw w(r[2]);var u=g(r[0],r[1]).slice();return i.__wbindgen_free(r[0],r[1]*1,1),u}async function _(e,n){if(typeof Response=="function"&&e instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(e,n)}catch(r){if(e.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",r);else throw r}const t=await e.arrayBuffer();return await WebAssembly.instantiate(t,n)}else{const t=await WebAssembly.instantiate(e,n);return t instanceof WebAssembly.Instance?{instance:t,module:e}:t}}function f(){const e={};return e.wbg={},e.wbg.__wbindgen_error_new=function(n,t){return new Error(y(n,t))},e.wbg.__wbindgen_init_externref_table=function(){const n=i.__wbindgen_export_0,t=n.grow(4);n.set(0,void 0),n.set(t+0,void 0),n.set(t+1,null),n.set(t+2,!0),n.set(t+3,!1)},e}function b(e,n){return i=e.exports,d.__wbindgen_wasm_module=n,s=null,i.__wbindgen_start(),i}function m(e){if(i!==void 0)return i;typeof e<"u"&&(Object.getPrototypeOf(e)===Object.prototype?{module:e}=e:console.warn("using deprecated parameters for `initSync()`; pass a single object instead"));const n=f();e instanceof WebAssembly.Module||(e=new WebAssembly.Module(e));const t=new WebAssembly.Instance(e,n);return b(t,e)}async function d(e){if(i!==void 0)return i;typeof e<"u"&&(Object.getPrototypeOf(e)===Object.prototype?{module_or_path:e}=e:console.warn("using deprecated parameters for the initialization function; pass a single object instead")),typeof e>"u"&&(e=new URL(""+new URL("blackbar_remover_bg.wasm",import.meta.url).href,import.meta.url));const n=f();(typeof e=="string"||typeof Request=="function"&&e instanceof Request||typeof URL=="function"&&e instanceof URL)&&(e=fetch(e));const{instance:t,module:r}=await _(await e,n);return b(t,r)}export{d as default,m as initSync,p as remove_black_bar};
